/* 
 * Serwis Rowerowy
 *
 * An ASP.NET Core Web API for managing bicycle service
 *
 * OpenAPI spec version: v1-0116
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Klient.Core.Client.SwaggerDateConverter;

namespace Klient.Core.Model
{
    /// <summary>
    /// RowerStatus
    /// </summary>
    [DataContract]
        public partial class RowerStatus :  IEquatable<RowerStatus>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RowerStatus" /> class.
        /// </summary>
        /// <param name="uid">uid.</param>
        /// <param name="changedBy">changedBy.</param>
        /// <param name="status">status.</param>
        public RowerStatus(long? uid = default(long?), User changedBy = default(User), string status = default(string))
        {
            this.Uid = uid;
            this.ChangedBy = changedBy;
            this.Status = status;
        }
        
        /// <summary>
        /// Gets or Sets Uid
        /// </summary>
        [DataMember(Name="uid", EmitDefaultValue=false)]
        public long? Uid { get; set; }

        /// <summary>
        /// Gets or Sets ChangedBy
        /// </summary>
        [DataMember(Name="changed_by", EmitDefaultValue=false)]
        public User ChangedBy { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public string Status { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RowerStatus {\n");
            sb.Append("  Uid: ").Append(Uid).Append("\n");
            sb.Append("  ChangedBy: ").Append(ChangedBy).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RowerStatus);
        }

        /// <summary>
        /// Returns true if RowerStatus instances are equal
        /// </summary>
        /// <param name="input">Instance of RowerStatus to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RowerStatus input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Uid == input.Uid ||
                    (this.Uid != null &&
                    this.Uid.Equals(input.Uid))
                ) && 
                (
                    this.ChangedBy == input.ChangedBy ||
                    (this.ChangedBy != null &&
                    this.ChangedBy.Equals(input.ChangedBy))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Uid != null)
                    hashCode = hashCode * 59 + this.Uid.GetHashCode();
                if (this.ChangedBy != null)
                    hashCode = hashCode * 59 + this.ChangedBy.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
