/* 
 * Serwis Rowerowy
 *
 * An ASP.NET Core Web API for managing bicycle service
 *
 * OpenAPI spec version: v1-0116
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Klient.Core.Client.SwaggerDateConverter;

namespace Klient.Core.Model {
    /// <summary>
    /// UserMyDataDTO
    /// </summary>
    [DataContract]
    public partial class UserMyDataDTO : IEquatable<UserMyDataDTO>, IValidatableObject {
        /// <summary>
        /// Initializes a new instance of the <see cref="UserMyDataDTO" /> class.
        /// </summary>
        /// <param name="uid">uid.</param>
        /// <param name="username">username.</param>
        /// <param name="permission">permission.</param>
        public UserMyDataDTO(long? uid = default(long?), string username = default(string), string permission = default(string)) {
            this.Uid = uid;
            this.Username = username;
            this.Permission = permission;
        }

        /// <summary>
        /// Gets or Sets Uid
        /// </summary>
        [DataMember(Name = "uid", EmitDefaultValue = false)]
        public long? Uid { get; set; }

        /// <summary>
        /// Gets or Sets Username
        /// </summary>
        [DataMember(Name = "username", EmitDefaultValue = false)]
        public string Username { get; set; }

        /// <summary>
        /// Gets or Sets Permission
        /// </summary>
        [DataMember(Name = "permission", EmitDefaultValue = false)]
        public string Permission { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString() {
            var sb = new StringBuilder();
            sb.Append("class UserMyDataDTO {\n");
            sb.Append("  Uid: ").Append(Uid).Append("\n");
            sb.Append("  Username: ").Append(Username).Append("\n");
            sb.Append("  Permission: ").Append(Permission).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson() {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input) {
            return this.Equals(input as UserMyDataDTO);
        }

        /// <summary>
        /// Returns true if UserMyDataDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of UserMyDataDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UserMyDataDTO input) {
            if (input == null)
                return false;

            return
                (
                    this.Uid == input.Uid ||
                    (this.Uid != null &&
                    this.Uid.Equals(input.Uid))
                ) &&
                (
                    this.Username == input.Username ||
                    (this.Username != null &&
                    this.Username.Equals(input.Username))
                ) &&
                (
                    this.Permission == input.Permission ||
                    (this.Permission != null &&
                    this.Permission.Equals(input.Permission))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode() {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Uid != null)
                    hashCode = hashCode * 59 + this.Uid.GetHashCode();
                if (this.Username != null)
                    hashCode = hashCode * 59 + this.Username.GetHashCode();
                if (this.Permission != null)
                    hashCode = hashCode * 59 + this.Permission.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext) {
            yield break;
        }
    }
}
