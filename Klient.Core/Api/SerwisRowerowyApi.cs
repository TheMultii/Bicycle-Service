/* 
 * Serwis Rowerowy
 *
 * An ASP.NET Core Web API for managing bicycle service
 *
 * OpenAPI spec version: v1-0116
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System.Collections.ObjectModel;
using RestSharp;
using Klient.Core.Client;
using Klient.Core.Model;

namespace Klient.Core.Api {
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISerwisRowerowyApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create new order
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">User and bike (optional)</param>
        /// <returns>RowerReturnable</returns>
        RowerReturnable ApiServiceBicyclePut(RowerDTO body = null);

        /// <summary>
        /// Create new order
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">User and bike (optional)</param>
        /// <returns>ApiResponse of RowerReturnable</returns>
        ApiResponse<RowerReturnable> ApiServiceBicyclePutWithHttpInfo(RowerDTO body = null);

        /// <summary>
        /// Delete an order
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">UID of an order</param>
        /// <returns></returns>
        void ApiServiceOrderUidDelete(long? uid);

        /// <summary>
        /// Delete an order
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">UID of an order</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiServiceOrderUidDeleteWithHttpInfo(long? uid);
        
        /// <summary>
        /// Get all bikes
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;Rower&gt;</returns>
        List<Rower> ApiServiceBicyclesGet ();

        /// <summary>
        /// Get all bikes
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Rower&gt;</returns>
        ApiResponse<List<Rower>> ApiServiceBicyclesGetWithHttpInfo ();
        /// <summary>
        /// Get bike by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">UID of bike</param>
        /// <returns>Rower</returns>
        Rower ApiServiceBicyclesUidGet (long? uid);

        /// <summary>
        /// Get bike by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">UID of bike</param>
        /// <returns>ApiResponse of Rower</returns>
        ApiResponse<Rower> ApiServiceBicyclesUidGetWithHttpInfo (long? uid);
        /// <summary>
        /// Set current order status
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">UID of an order</param>
        /// <param name="body">JSON with order status (optional)</param>
        /// <returns>RowerReturnable</returns>
        RowerReturnable ApiServiceOrderUidStatusPatch(long? uid, RowerStatusDTO body = null);

        /// <summary>
        /// Set current order status
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">UID of an order</param>
        /// <param name="body">JSON with order status (optional)</param>
        /// <returns>ApiResponse of RowerReturnable</returns>
        ApiResponse<RowerReturnable> ApiServiceOrderUidStatusPatchWithHttpInfo(long? uid, RowerStatusDTO body = null);
        /// <summary>
        /// Update an order
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">UID of an order</param>
        /// <param name="body">Order JSON (optional)</param>
        /// <returns>RowerReturnable</returns>
        RowerReturnable ApiServiceOrdersUidPatch(long? uid, RowerDTO body = null);

        /// <summary>
        /// Update an order
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">UID of an order</param>
        /// <param name="body">Order JSON (optional)</param>
        /// <returns>ApiResponse of RowerReturnable</returns>
        ApiResponse<RowerReturnable> ApiServiceOrdersUidPatchWithHttpInfo(long? uid, RowerDTO body = null);
        /// <summary>
        /// Get all user orders
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;RowerReturnable&gt;</returns>
        List<RowerReturnable> MyOrdersGet ();

        /// <summary>
        /// Get all user orders
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;RowerReturnable&gt;</returns>
        ApiResponse<List<RowerReturnable>> MyOrdersGetWithHttpInfo ();

        /// <summary>
        /// Delete an order
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">UID of an order</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiServiceOrderUidDeleteAsync(long? uid);

        /// <summary>
        /// Delete an order
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">UID of an order</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiServiceOrderUidDeleteAsyncWithHttpInfo(long? uid);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create new order
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">User and bike (optional)</param>
        /// <returns>Task of RowerReturnable</returns>
        System.Threading.Tasks.Task<RowerReturnable> ApiServiceBicyclePutAsync(RowerDTO body = null);

        /// <summary>
        /// Create new order
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">User and bike (optional)</param>
        /// <returns>Task of ApiResponse (RowerReturnable)</returns>
        System.Threading.Tasks.Task<ApiResponse<RowerReturnable>> ApiServiceBicyclePutAsyncWithHttpInfo(RowerDTO body = null);
        /// <summary>
        /// Get all bikes
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;Rower&gt;</returns>
        System.Threading.Tasks.Task<List<Rower>> ApiServiceBicyclesGetAsync ();

        /// <summary>
        /// Get all bikes
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;Rower&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Rower>>> ApiServiceBicyclesGetAsyncWithHttpInfo ();
        /// <summary>
        /// Get bike by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">UID of bike</param>
        /// <returns>Task of Rower</returns>
        System.Threading.Tasks.Task<Rower> ApiServiceBicyclesUidGetAsync (long? uid);

        /// <summary>
        /// Get bike by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">UID of bike</param>
        /// <returns>Task of ApiResponse (Rower)</returns>
        System.Threading.Tasks.Task<ApiResponse<Rower>> ApiServiceBicyclesUidGetAsyncWithHttpInfo (long? uid);
        /// <summary>
        /// Set current order status
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">UID of an order</param>
        /// <param name="body">JSON with order status (optional)</param>
        /// <returns>Task of RowerReturnable</returns>
        System.Threading.Tasks.Task<RowerReturnable> ApiServiceOrderUidStatusPatchAsync(long? uid, RowerStatusDTO body = null);

        /// <summary>
        /// Set current order status
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">UID of an order</param>
        /// <param name="body">JSON with order status (optional)</param>
        /// <returns>Task of ApiResponse (RowerReturnable)</returns>
        System.Threading.Tasks.Task<ApiResponse<RowerReturnable>> ApiServiceOrderUidStatusPatchAsyncWithHttpInfo(long? uid, RowerStatusDTO body = null);
        /// <summary>
        /// Update an order
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">UID of an order</param>
        /// <param name="body">Order JSON (optional)</param>
        /// <returns>Task of RowerReturnable</returns>
        System.Threading.Tasks.Task<RowerReturnable> ApiServiceOrdersUidPatchAsync(long? uid, RowerDTO body = null);

        /// <summary>
        /// Update an order
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">UID of an order</param>
        /// <param name="body">Order JSON (optional)</param>
        /// <returns>Task of ApiResponse (RowerReturnable)</returns>
        System.Threading.Tasks.Task<ApiResponse<RowerReturnable>> ApiServiceOrdersUidPatchAsyncWithHttpInfo(long? uid, RowerDTO body = null);
        /// <summary>
        /// Get all user orders
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;RowerReturnable&gt;</returns>
        System.Threading.Tasks.Task<List<RowerReturnable>> MyOrdersGetAsync ();

        /// <summary>
        /// Get all user orders
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;RowerReturnable&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<RowerReturnable>>> MyOrdersGetAsyncWithHttpInfo ();
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class SerwisRowerowyApi : ISerwisRowerowyApi
    {
        private Klient.Core.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SerwisRowerowyApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SerwisRowerowyApi(String basePath)
        {
            this.Configuration = new Klient.Core.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Klient.Core.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SerwisRowerowyApi"/> class
        /// </summary>
        /// <returns></returns>
        public SerwisRowerowyApi()
        {
            this.Configuration = Klient.Core.Client.Configuration.Default;

            ExceptionFactory = Klient.Core.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SerwisRowerowyApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public SerwisRowerowyApi(Klient.Core.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Klient.Core.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Klient.Core.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Klient.Core.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Klient.Core.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create new order 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">User and bike (optional)</param>
        /// <returns>RowerReturnable</returns>
        public RowerReturnable ApiServiceBicyclePut(RowerDTO body = null) {
            ApiResponse<RowerReturnable> localVarResponse = ApiServiceBicyclePutWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create new order 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">User and bike (optional)</param>
        /// <returns>ApiResponse of RowerReturnable</returns>
        public ApiResponse<RowerReturnable> ApiServiceBicyclePutWithHttpInfo(RowerDTO body = null) {

            var localVarPath = "/api/service/bicycle";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json",
                "text/json",
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[])) {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            } else {
                localVarPostBody = body; // byte array
            }
            // authentication (oauth2) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization"))) {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null) {
                Exception exception = ExceptionFactory("ApiServiceBicyclePut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RowerReturnable>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (RowerReturnable)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RowerReturnable)));
        }

        /// <summary>
        /// Create new order 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">User and bike (optional)</param>
        /// <returns>Task of RowerReturnable</returns>
        public async System.Threading.Tasks.Task<RowerReturnable> ApiServiceBicyclePutAsync(RowerDTO body = null) {
            ApiResponse<RowerReturnable> localVarResponse = await ApiServiceBicyclePutAsyncWithHttpInfo(body);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Create new order 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">User and bike (optional)</param>
        /// <returns>Task of ApiResponse (RowerReturnable)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RowerReturnable>> ApiServiceBicyclePutAsyncWithHttpInfo(RowerDTO body = null) {

            var localVarPath = "/api/service/bicycle";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json",
                "text/json",
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[])) {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            } else {
                localVarPostBody = body; // byte array
            }
            // authentication (oauth2) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization"))) {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null) {
                Exception exception = ExceptionFactory("ApiServiceBicyclePut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RowerReturnable>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (RowerReturnable)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RowerReturnable)));
        }

        /// <summary>
        /// Get all bikes 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;Rower&gt;</returns>
        public List<Rower> ApiServiceBicyclesGet ()
        {
             ApiResponse<List<Rower>> localVarResponse = ApiServiceBicyclesGetWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all bikes 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Rower&gt;</returns>
        public ApiResponse< List<Rower> > ApiServiceBicyclesGetWithHttpInfo ()
        {

            var localVarPath = "/api/service/bicycles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (oauth2) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiServiceBicyclesGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Rower>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Rower>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Rower>)));
        }

        /// <summary>
        /// Get all bikes 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;Rower&gt;</returns>
        public async System.Threading.Tasks.Task<List<Rower>> ApiServiceBicyclesGetAsync ()
        {
             ApiResponse<List<Rower>> localVarResponse = await ApiServiceBicyclesGetAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all bikes 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;Rower&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Rower>>> ApiServiceBicyclesGetAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/service/bicycles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (oauth2) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiServiceBicyclesGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Rower>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Rower>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Rower>)));
        }

        /// <summary>
        /// Get bike by ID 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">UID of bike</param>
        /// <returns>Rower</returns>
        public Rower ApiServiceBicyclesUidGet (long? uid)
        {
             ApiResponse<Rower> localVarResponse = ApiServiceBicyclesUidGetWithHttpInfo(uid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get bike by ID 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">UID of bike</param>
        /// <returns>ApiResponse of Rower</returns>
        public ApiResponse< Rower > ApiServiceBicyclesUidGetWithHttpInfo (long? uid)
        {
            // verify the required parameter 'uid' is set
            if (uid == null)
                throw new ApiException(400, "Missing required parameter 'uid' when calling SerwisRowerowyApi->ApiServiceBicyclesUidGet");

            var localVarPath = "/api/service/bicycles/{uid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (uid != null) localVarPathParams.Add("uid", this.Configuration.ApiClient.ParameterToString(uid)); // path parameter
            // authentication (oauth2) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiServiceBicyclesUidGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Rower>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Rower) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Rower)));
        }

        /// <summary>
        /// Get bike by ID 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">UID of bike</param>
        /// <returns>Task of Rower</returns>
        public async System.Threading.Tasks.Task<Rower> ApiServiceBicyclesUidGetAsync (long? uid)
        {
             ApiResponse<Rower> localVarResponse = await ApiServiceBicyclesUidGetAsyncWithHttpInfo(uid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get bike by ID 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">UID of bike</param>
        /// <returns>Task of ApiResponse (Rower)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Rower>> ApiServiceBicyclesUidGetAsyncWithHttpInfo (long? uid)
        {
            // verify the required parameter 'uid' is set
            if (uid == null)
                throw new ApiException(400, "Missing required parameter 'uid' when calling SerwisRowerowyApi->ApiServiceBicyclesUidGet");

            var localVarPath = "/api/service/bicycles/{uid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (uid != null) localVarPathParams.Add("uid", this.Configuration.ApiClient.ParameterToString(uid)); // path parameter
            // authentication (oauth2) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiServiceBicyclesUidGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Rower>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Rower) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Rower)));
        }

        /// <summary>
        /// Set current order status 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">UID of an order</param>
        /// <param name="body">JSON with order status (optional)</param>
        /// <returns>RowerReturnable</returns>
        public RowerReturnable ApiServiceOrderUidStatusPatch(long? uid, RowerStatusDTO body = null) {
            ApiResponse<RowerReturnable> localVarResponse = ApiServiceOrderUidStatusPatchWithHttpInfo(uid, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Set current order status 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">UID of an order</param>
        /// <param name="body">JSON with order status (optional)</param>
        /// <returns>ApiResponse of RowerReturnable</returns>
        public ApiResponse<RowerReturnable> ApiServiceOrderUidStatusPatchWithHttpInfo(long? uid, RowerStatusDTO body = null) {
            // verify the required parameter 'uid' is set
            if (uid == null)
                throw new ApiException(400, "Missing required parameter 'uid' when calling SerwisRowerowyApi->ApiServiceOrderUidStatusPatch");

            var localVarPath = "/api/service/order/{uid}/status";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json",
                "text/json",
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (uid != null) localVarPathParams.Add("uid", this.Configuration.ApiClient.ParameterToString(uid)); // path parameter
            if (body != null && body.GetType() != typeof(byte[])) {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            } else {
                localVarPostBody = body; // byte array
            }
            // authentication (oauth2) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization"))) {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null) {
                Exception exception = ExceptionFactory("ApiServiceOrderUidStatusPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RowerReturnable>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (RowerReturnable)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RowerReturnable)));
        }

        /// <summary>
        /// Set current order status 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">UID of an order</param>
        /// <param name="body">JSON with order status (optional)</param>
        /// <returns>Task of RowerReturnable</returns>
        public async System.Threading.Tasks.Task<RowerReturnable> ApiServiceOrderUidStatusPatchAsync(long? uid, RowerStatusDTO body = null) {
            ApiResponse<RowerReturnable> localVarResponse = await ApiServiceOrderUidStatusPatchAsyncWithHttpInfo(uid, body);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Set current order status 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">UID of an order</param>
        /// <param name="body">JSON with order status (optional)</param>
        /// <returns>Task of ApiResponse (RowerReturnable)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RowerReturnable>> ApiServiceOrderUidStatusPatchAsyncWithHttpInfo(long? uid, RowerStatusDTO body = null) {
            // verify the required parameter 'uid' is set
            if (uid == null)
                throw new ApiException(400, "Missing required parameter 'uid' when calling SerwisRowerowyApi->ApiServiceOrderUidStatusPatch");

            var localVarPath = "/api/service/order/{uid}/status";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json",
                "text/json",
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (uid != null) localVarPathParams.Add("uid", this.Configuration.ApiClient.ParameterToString(uid)); // path parameter
            if (body != null && body.GetType() != typeof(byte[])) {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            } else {
                localVarPostBody = body; // byte array
            }
            // authentication (oauth2) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization"))) {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null) {
                Exception exception = ExceptionFactory("ApiServiceOrderUidStatusPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RowerReturnable>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (RowerReturnable)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RowerReturnable)));
        }

        /// <summary>
        /// Update an order 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">UID of an order</param>
        /// <param name="body">Order JSON (optional)</param>
        /// <returns>RowerReturnable</returns>
        public RowerReturnable ApiServiceOrdersUidPatch(long? uid, RowerDTO body = null) {
            ApiResponse<RowerReturnable> localVarResponse = ApiServiceOrdersUidPatchWithHttpInfo(uid, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update an order 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">UID of an order</param>
        /// <param name="body">Order JSON (optional)</param>
        /// <returns>ApiResponse of RowerReturnable</returns>
        public ApiResponse<RowerReturnable> ApiServiceOrdersUidPatchWithHttpInfo(long? uid, RowerDTO body = null) {
            // verify the required parameter 'uid' is set
            if (uid == null)
                throw new ApiException(400, "Missing required parameter 'uid' when calling SerwisRowerowyApi->ApiServiceOrdersUidPatch");

            var localVarPath = "/api/service/orders/{uid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json",
                "text/json",
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (uid != null) localVarPathParams.Add("uid", this.Configuration.ApiClient.ParameterToString(uid)); // path parameter
            if (body != null && body.GetType() != typeof(byte[])) {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            } else {
                localVarPostBody = body; // byte array
            }
            // authentication (oauth2) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization"))) {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null) {
                Exception exception = ExceptionFactory("ApiServiceOrdersUidPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RowerReturnable>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (RowerReturnable)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RowerReturnable)));
        }

        /// <summary>
        /// Update an order 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">UID of an order</param>
        /// <param name="body">Order JSON (optional)</param>
        /// <returns>Task of RowerReturnable</returns>
        public async System.Threading.Tasks.Task<RowerReturnable> ApiServiceOrdersUidPatchAsync(long? uid, RowerDTO body = null) {
            ApiResponse<RowerReturnable> localVarResponse = await ApiServiceOrdersUidPatchAsyncWithHttpInfo(uid, body);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Update an order 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">UID of an order</param>
        /// <param name="body">Order JSON (optional)</param>
        /// <returns>Task of ApiResponse (RowerReturnable)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RowerReturnable>> ApiServiceOrdersUidPatchAsyncWithHttpInfo(long? uid, RowerDTO body = null) {
            // verify the required parameter 'uid' is set
            if (uid == null)
                throw new ApiException(400, "Missing required parameter 'uid' when calling SerwisRowerowyApi->ApiServiceOrdersUidPatch");

            var localVarPath = "/api/service/orders/{uid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json",
                "text/json",
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (uid != null) localVarPathParams.Add("uid", this.Configuration.ApiClient.ParameterToString(uid)); // path parameter
            if (body != null && body.GetType() != typeof(byte[])) {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            } else {
                localVarPostBody = body; // byte array
            }
            // authentication (oauth2) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization"))) {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null) {
                Exception exception = ExceptionFactory("ApiServiceOrdersUidPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RowerReturnable>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (RowerReturnable)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RowerReturnable)));
        }

        /// <summary>
        /// Get all user orders 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;RowerReturnable&gt;</returns>
        public List<RowerReturnable> MyOrdersGet ()
        {
             ApiResponse<List<RowerReturnable>> localVarResponse = MyOrdersGetWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all user orders 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;RowerReturnable&gt;</returns>
        public ApiResponse< List<RowerReturnable> > MyOrdersGetWithHttpInfo ()
        {

            var localVarPath = "/my-orders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (oauth2) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MyOrdersGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<RowerReturnable>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<RowerReturnable>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<RowerReturnable>)));
        }

        /// <summary>
        /// Get all user orders 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;RowerReturnable&gt;</returns>
        public async System.Threading.Tasks.Task<List<RowerReturnable>> MyOrdersGetAsync ()
        {
             ApiResponse<List<RowerReturnable>> localVarResponse = await MyOrdersGetAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all user orders 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;RowerReturnable&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<RowerReturnable>>> MyOrdersGetAsyncWithHttpInfo ()
        {

            var localVarPath = "/my-orders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (oauth2) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MyOrdersGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<RowerReturnable>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<RowerReturnable>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<RowerReturnable>)));
        }

        /// <summary>
        /// Delete an order 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">UID of an order</param>
        /// <returns></returns>
        public void ApiServiceOrderUidDelete(long? uid) {
            ApiServiceOrderUidDeleteWithHttpInfo(uid);
        }

        /// <summary>
        /// Delete an order 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">UID of an order</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ApiServiceOrderUidDeleteWithHttpInfo(long? uid) {
            // verify the required parameter 'uid' is set
            if (uid == null)
                throw new ApiException(400, "Missing required parameter 'uid' when calling SerwisRowerowyApi->ApiServiceOrderUidDelete");

            var localVarPath = "/api/service/order/{uid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (uid != null) localVarPathParams.Add("uid", this.Configuration.ApiClient.ParameterToString(uid)); // path parameter
            // authentication (oauth2) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization"))) {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null) {
                Exception exception = ExceptionFactory("ApiServiceOrderUidDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Delete an order 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">UID of an order</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiServiceOrderUidDeleteAsync(long? uid) {
            await ApiServiceOrderUidDeleteAsyncWithHttpInfo(uid);

        }

        /// <summary>
        /// Delete an order 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">UID of an order</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ApiServiceOrderUidDeleteAsyncWithHttpInfo(long? uid) {
            // verify the required parameter 'uid' is set
            if (uid == null)
                throw new ApiException(400, "Missing required parameter 'uid' when calling SerwisRowerowyApi->ApiServiceOrderUidDelete");

            var localVarPath = "/api/service/order/{uid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (uid != null) localVarPathParams.Add("uid", this.Configuration.ApiClient.ParameterToString(uid)); // path parameter
            // authentication (oauth2) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization"))) {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null) {
                Exception exception = ExceptionFactory("ApiServiceOrderUidDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }
    }
}
